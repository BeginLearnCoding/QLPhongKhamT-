// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhongKham.Infrastructure.Data;

namespace PhongKham.Infrastructure.Migrations
{
    [DbContext(typeof(PhongKhamDbContext))]
    [Migration("20230805050650_ChangeSDTfromIntToString")]
    partial class ChangeSDTfromIntToString
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.BacSi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TenBacSi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("diaChiBS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sdtBS")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("bacSis");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.Benh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MoTa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tenBenh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("benhs");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.BenhNhan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TenBenhNhan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dChiBN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("gioiTinh")
                        .HasColumnType("int");

                    b.Property<string>("sdtBN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("benhNhans");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.ChiTietToaThuoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ThuocId")
                        .HasColumnType("int");

                    b.Property<int>("ToaThuocId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ThuocId");

                    b.HasIndex("ToaThuocId");

                    b.ToTable("chiTietToaThuocs");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.HoaDon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BenhNhanId")
                        .HasColumnType("int");

                    b.Property<int>("PhieuKhamBenhId")
                        .HasColumnType("int");

                    b.Property<int?>("ToaThuocId")
                        .HasColumnType("int");

                    b.Property<int>("TongThanhToan")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateTimeHD")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BenhNhanId");

                    b.HasIndex("PhieuKhamBenhId")
                        .IsUnique();

                    b.HasIndex("ToaThuocId")
                        .IsUnique()
                        .HasFilter("[ToaThuocId] IS NOT NULL");

                    b.ToTable("hoaDons");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.NhanVien", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("dChiNV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sdtNV")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tenNhanVien")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("nhanViens");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.PhieuKhamBenh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BacSiId")
                        .HasColumnType("int");

                    b.Property<int>("BenhId")
                        .HasColumnType("int");

                    b.Property<int>("BenhNhanId")
                        .HasColumnType("int");

                    b.Property<string>("GhiChu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NhanVienId")
                        .HasColumnType("int");

                    b.Property<int>("TienKhamBenh")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateTimeKhamBenh")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BacSiId");

                    b.HasIndex("BenhId");

                    b.HasIndex("BenhNhanId");

                    b.HasIndex("NhanVienId");

                    b.ToTable("phieuKhamBenhs");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.Thuoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DonGia")
                        .HasColumnType("int");

                    b.Property<string>("TenThuoc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cachDung")
                        .HasColumnType("int");

                    b.Property<int>("donVi")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("thuocs");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.ToaThuoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GhiChu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhieuKhamBenhId")
                        .HasColumnType("int");

                    b.Property<int>("TongTienThuoc")
                        .HasColumnType("int");

                    b.Property<DateTime>("dataTimeToaThuoc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PhieuKhamBenhId")
                        .IsUnique();

                    b.ToTable("toaThuocs");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.UserAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PhongKham.Core.Entities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PhongKham.Core.Entities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhongKham.Core.Entities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PhongKham.Core.Entities.UserAccount", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PhongKham.Core.Entities.ChiTietToaThuoc", b =>
                {
                    b.HasOne("PhongKham.Core.Entities.Thuoc", "Thuoc")
                        .WithMany()
                        .HasForeignKey("ThuocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhongKham.Core.Entities.ToaThuoc", "ToaThuoc")
                        .WithMany("chiTietToaThuocs")
                        .HasForeignKey("ToaThuocId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thuoc");

                    b.Navigation("ToaThuoc");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.HoaDon", b =>
                {
                    b.HasOne("PhongKham.Core.Entities.BenhNhan", "BenhNhan")
                        .WithMany("HoaDons")
                        .HasForeignKey("BenhNhanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhongKham.Core.Entities.PhieuKhamBenh", "PhieuKhamBenh")
                        .WithOne("HoaDon")
                        .HasForeignKey("PhongKham.Core.Entities.HoaDon", "PhieuKhamBenhId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhongKham.Core.Entities.ToaThuoc", "ToaThuoc")
                        .WithOne("HoaDon")
                        .HasForeignKey("PhongKham.Core.Entities.HoaDon", "ToaThuocId");

                    b.Navigation("BenhNhan");

                    b.Navigation("PhieuKhamBenh");

                    b.Navigation("ToaThuoc");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.PhieuKhamBenh", b =>
                {
                    b.HasOne("PhongKham.Core.Entities.BacSi", "BacSi")
                        .WithMany("PhieuKhamBenhs")
                        .HasForeignKey("BacSiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhongKham.Core.Entities.Benh", "Benh")
                        .WithMany("phieuKhamBenhs")
                        .HasForeignKey("BenhId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PhongKham.Core.Entities.BenhNhan", "BenhNhan")
                        .WithMany("PhieuKhamBenhs")
                        .HasForeignKey("BenhNhanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PhongKham.Core.Entities.NhanVien", "NhanVien")
                        .WithMany("PhieuKhamBenhs")
                        .HasForeignKey("NhanVienId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BacSi");

                    b.Navigation("Benh");

                    b.Navigation("BenhNhan");

                    b.Navigation("NhanVien");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.ToaThuoc", b =>
                {
                    b.HasOne("PhongKham.Core.Entities.PhieuKhamBenh", "PhieuKhamBenh")
                        .WithOne("ToaThuoc")
                        .HasForeignKey("PhongKham.Core.Entities.ToaThuoc", "PhieuKhamBenhId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PhieuKhamBenh");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.BacSi", b =>
                {
                    b.Navigation("PhieuKhamBenhs");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.Benh", b =>
                {
                    b.Navigation("phieuKhamBenhs");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.BenhNhan", b =>
                {
                    b.Navigation("HoaDons");

                    b.Navigation("PhieuKhamBenhs");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.NhanVien", b =>
                {
                    b.Navigation("PhieuKhamBenhs");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.PhieuKhamBenh", b =>
                {
                    b.Navigation("HoaDon");

                    b.Navigation("ToaThuoc");
                });

            modelBuilder.Entity("PhongKham.Core.Entities.ToaThuoc", b =>
                {
                    b.Navigation("chiTietToaThuocs");

                    b.Navigation("HoaDon");
                });
#pragma warning restore 612, 618
        }
    }
}
